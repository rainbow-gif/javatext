SpringBoot开发相关流程
部门：工具与装备部
作者：常红
日期：20210908
Security Level:

maven创建SpringBoot项目 
项目应用
springBoot的核心配置文件
springBoot整合Mybatis
SpringBoot概览
SpringBoot实现原理


maven创建SpringBoot项目 
环境准备





IDEA 快速构建





开发工具

   











IDEA 中可以通过File->New->Project来快速构建 Spring Boot 工程。通过选择 Spring Initializr，到项目的配置信息。
Group：一般填企业域名
Artifact：一般填项目名称
Dependencies：可以添加我们项目中所需要的依赖信息，根据实际情况来添加。












项目应用

springboot的项目结构











springboot的常规开发
检查springboot





















在新建controller包，并新建类：HelloController




                                                                                                          执行效果：









入口类和@SpringBootApplication注解





















我们新建一个Project系统都会帮我们创建一个名为artifactId+Application的入口类，这个类中有一个main方法，这个main方法就是一个标准的Java应用程序的入口方法。




                                                                                                        


















这里的@SpringBootApplication是一个组合注解，如果使用了@SpringBootApplication注解的话，系统会去入口类的同级包以及下级包中去扫描实体类。







SpringApplication.run的作用
1、启动tomcat
2、布署当前项目
3、加载spring容器 SpringBootCrmApplication作为配置文件配置springmvc DispatcherServlet.
4、配置springmvc DispatcherServlet
主类Application的作用：
* 作为spring boot的启动类
* 作为spring容器配置文件





                                                                                                          








springboot的核心配置文件
application.yaml  











Springboot的核心配置文件主要是来修改一些基本配置(服务器端口号、项目访问名字)以及集成配置(数据源、mybatis、redis等等)
Springboot的核心配置文件分为两种形式：（注意：名字都必须为application）
Spring Boot使用一个全局的配置文件application.properties或者application.yml，配置文件放在src/main/resources目录下。

   











在实际开发过程中，不同的开发环境，我们使用的配置信息也是不一样的，这关系到连接池配置、工厂配置等等
例如：生产环境（线上环境）、开发环境（线下环境）、测试环境（单元测试）
不同的环境我们要指定不同的配置文件，相对springboot给我们提供了这样的便利。
也可以在application.properties总配置文件中引入
application-dev.properties(开发)或
application-prod.properties(生产)或
application-test.properties(测试) 
达到动态切换环境的目的
1.修改默认端口和默认访问路径
2.常规属性配置
3.日志配置






                                                                                                          








自定义springboot配置





















方式一：通过@Value(“${upload.imagePath}”)




                                                                                                        


















方式二：定义通用映射解析




                                                                                                        









Springboot的application.properties/application.yml 文件还可以配置一些自定义属性，用来给对象属性赋值，方便代码维护，以及解耦合。
应用场景：springMvc文件上传，定义全局文件夹路径。

在application.yml中添加自定义属性配置



                                                                                                        









springboot整合Mybatis






















修改pom.xml，导入相关依赖jar





                                                                                                          




























在配置文件中加入连接池以及mybatis的相关配置



                                                                                                          






创建POJO——entity/PermissionAuditData.java



                                                                                                          






根据Mapper接口类获取映射实现结果





                                                                                                          








创建一个数据层接口——mapper/PermissionMapper.java，这是一个Mapper类，代码如下：


                                                                                              











创建一个用户服务——service/PermissionServiceImpl.java




这是一个Spring Web的Controller类，引入了spring-boot-starter-web依赖，封装数据和页面进行交互。



                                                                                                          
















































全局异常处理








自定义异常





                                                                                                          








全局概览






















异常处理器






                                                                                                          








第一种：使用@ControllerAdvice和@ExceptionHandler注解
第二种: 使用ErrorController类来实现。
区别：
1.注解@ControllerAdvice方式只能处理控制器抛出的异常。此时请求已经进入控制器中。
2.类ErrorController方式可以处理所有的异常，包括未进入控制器的错误，比如404,401等错误。
3. @ControllerAdvice方式可以定义多个拦截方法，拦截不同的异常类，并且可以获取抛出的异常信息，自由度更大。

注解@ControllerAdvice表示这是一个控制器增强类，当控制器发生异常且符合类中定义的拦截异常类，将会被拦截，可以定义拦截的控制器所在的包路径。
注解ExceptionHandler定义拦截的异常类。




比如SpringBoot微服务中的所有controller层需要对http请求进行一些常规日志的打印，如果每次在controller进行打印，代码就会冗余，如果说将这些公共代码进行封装，也需要每一个controller类进行调用，所以AOP出现的恰到好处，这时候引入AOP对http相关的日志逻辑进行统一管理编写代码，不需要controller层进行调用，只需要创建一个切面，并通过切入点绑定controller即可。




                                                                                                          








集成AOP




















SpringBoot实现原理

1.Springboot依赖


































1.1 springboot给我们做了大量的自动配置功能，我们只需要引入对应的启动器就可以直接使用。分两个点来看，从pom文件出发，首先，是有一个父工程的引用。
继续往里面跟踪，发现父工程又依赖于另一个父工程，继续跟踪，发现这是一个pom工程，统一控制版本，定义了一堆第三方jar包的版本。
结论：使用了SpringBoot之后，由于父工程有对版本的统一控制，所以大部分第三方包，我们无需关注版本，个别没有纳入SpringBoot管理的，才需要设置版本号
1.2 SpringBoot将所有的常见开发功能，分成了一个个场景启动器（starter），需要开发什么功能，就导入什么场景启动器依赖即可。
比如，现在要开发web项目，所以我们导入了spring-boot-starter-web

SpringBoot是通过定义各种各样的Starter来管理这些依赖的。
比如，我们需要开发web的功能，那么引入spring-boot-starter-web。
比如，我们需要开发模板页的功能，那么引入spring-boot-starter-thymeleaf。
我们需要整合redis，那么引入spring-boot-starter-data-redis。
我们需要整合amqp，实现异步消息通信机制，那么引入spring-boot-starter-amqp




                                                                                                          





















2.依赖为什么不需要配置








内部也复用一些starter
@SpringBootConfiguration内部是包含了@Configuration，这是Spring定义配置类的注解。而@Configuration实际上就是一个@Component，表示一个受Spring管理的组件。@EnableAutoConfiguration这个注解的作用是告诉SpringBoot开启自动配置功能，这样就减少我们的配置。




                                                                                                          






























@AutoConfigurationPackage注解的内部是采用了@Import，来给容器导入一个Registrar组件，这个组件会去加载启动类所在包下面的所有类，
这也是controller，service必须在启动类的同级目录或子级目录的原因。
再来分析@Import(AutoConfigurationImportSelector.class)，这个的关键是来看AutoConfigurationImportSelector.class内部的细节，
在这个类的内部，有一个关键的方法，默认加载了好多的自动配置类，这些自动配置类，会自动给我们加载每个场景所需的所有组件，并配置好这些组件，这样就省去了很多的配置










Process finished with exit code 0
